其内存缓存容量为0
则，put(e)时，会因为超出了 队列容量限制 而被阻塞
	但是，请注意：你还是可以put的，只是被阻塞了
其意味着：生产者生产的数据 必须要得到消费，生产者才能继续下去

其可提供 访问者访问的公平fair
public SynchronousQueue(boolean fair) {
	//这里的TransferQueue仅仅是synchronousqueue的内部类
	transferer = fair ? new TransferQueue<E>() : new TransferStack<E>();
}

----------------------------------------例子：
private static void testSynchronousQueue() {
    final SynchronousQueue<String> queue = new SynchronousQueue<>();

    Thread produceThread = new Thread(new Runnable() {
        @Override
        public void run() {
            System.out.println("produce!!");
            try {
                queue.put("1");
                System.out.println("put 1!");
                queue.put("2");
                System.out.println("put 2");
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
        }
    });
    produceThread.start();

    Thread consumeThread = new Thread(new Runnable() {
        @Override
        public void run() {
            System.out.println("consume!!!");
            String content = null;
            try {
                content = queue.take();
                System.out.println("take content:" + content);
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
        }
    });
    consumeThread.start();
}

结果：
produce!!
consume!!!
put 1!
take content:1