参见：
Java并发之AQS详解 - waterystone - 博客园
	http://www.cnblogs.com/waterystone/p/4920797.html

解决了什么 基本问题（封装了什么模型）：
当在线程1请求资源时，如果失败，线程1如何被阻塞；
当其他线程释放了资源后，被阻塞的线程1 如何被自动唤醒

对上述流程进行了封装，则针对于 上层开发者，其只需要实现如下：
定义 如何能获得/释放 资源（参考于 AbstractQueuedSynchronizer#state的值）
	对于独占资源，需要实现：boolean tryAcquire, boolean tryRelease
		独占资源：同一时刻，只有一个线程才能获得资源
	对于共享资源，需要实现：int tryAcquireShared, boolean tryReleaseShared
		共享资源：同一时刻，可由多个线程共同获得资源
	--
	这也是为什么tryAcquire等方法不是abstract的原因：一种AQS的子类实现 仅仅是一种情况（独占资源，或者，共享资源），则没有必要实现 两组方法
	--
	提供辅助AbstractQueuedSynchronizer#state（int类型）来协助 上述流程：
	state什么意思：
		对于独占资源（如：ReentrantLock）：当前，所有线程（包含自身线程）总共申请到了多少个资源。
			在tryAcquire时（如：locks.ReentrantLock.NonfairSync#tryAcquire）
				如果发现state为0，则意味着 当前还没有线程 申请到该资源，那么我可以来申请（对应于 非公平锁：ReentrantLock.Sync#nonfairTryAcquire）
					而对于公平锁的情况，在判断state为0时，需要先判断 之前是否已经有Node来申请资源（AbstractQueuedSynchronizer#hasQueuedPredecessors）
						public final boolean hasQueuedPredecessors() {
							Node t = tail; // Read fields in reverse initialization order
							Node h = head;
							Node s;
							return h != t &&
								//为什么s为null时，就不能申请：
								//当h.next为null时，一种情况，原head.next占用了资源，并设置h.next为null（参见：AbstractQueuedSynchronizer#acquireQueued）
								//则此刻，代表，已经有一个node获得了资源，则对于独占资源，此刻的资源申请肯定是不成功的，则没必要再进行资源申请
								((s = h.next) == null || 
								s.thread != Thread.currentThread());
						}
				如果发现state不为0，则需要去查看 当前资源的占用线程是否为自身线程，如果是，就可以申请得到，否则，申请失败
				--
				exclusiveOwnerThread：
				它代表了当前哪个线程占有资源
				请注意：state是标志，而exclusiveOwnerThread是中间的结果
					类似于：FutureTask中的state 和 outcome
				当tryAcquire时，总是先试图去改变state，成功后再设置exclusiveOwnerThread
				而对于tryRelease，当判断state即将为0时，将先设置exclusiveOwnerThread，后再设置state
			在tryRelease中（如：locks.ReentrantLock.Sync#tryRelease）
				state-=releaseCount，如果最后数据为0
					设置exclusiveOwnerThread为null
					并意味着 其他线程可以获得该资源，则唤醒head.后继
		--
		对于共享资源（如：CountDownLatch）：当前，“god”设置了几道屏障（而只有所有的屏障被release后，我才能能申请到资源）（state的值是在构造函数中指定）
			在tryAcquire时（如：CountDownLatch.Sync#tryAcquireShared）
				如果发现state为0，则意味着 可以申请得到
				如果发现state不为0，则意味着 不能申请得到
			在tryRelease时，需要CAS来使得 state-=releaseCount
				当state为0时，意味着其他线程可以获得资源，则唤醒head.后继

采用了CAS的方式（并未采用Sychronized）
		
------------------------------------------------核心流程（可和ReentrantLock 和 CountDownLatch一起来查看）：
>>> acquire资源时
开发者来定义 什么情况下可获得资源（tryAcquire）
	提供了额外的state来协助实现
如果能获得，那么继续客户流程
如果不能获得，那么会生成数据结构Node，并将Node入队列（链表表示）的尾部
	Node
		代表：本次的资源申请，拥有thread, waitStatus等属性
		前驱后继：next, pre
		waitStatus
			SIGNAL：当释放资源后，要唤醒后继节点时，head.waitStatus需要为SIGNAL
				对于独占资源，要求waitStatus!=0
				对于共享资源，要求waitStatus==SIGNAL
				--
				当节点1发现其 前继节点1的waitStatus为SIGNAL时，则放心：节点1在释放资源后 一定会唤醒后继（节点2）
				（无论在unpark之前，节点2是否执行了park（就算之后才执行park，也无所谓，参见：LockSupport.txt））
			0：
				是一个开始的初始值，当要释放资源时，如果发现head.waitStatus还为0，则代表不需要唤醒后继（因为，在AbstractQueuedSynchronizer#shouldParkAfterFailedAcquire时，会设置前继的waitStatus为SIGNAL）
				也代表着一个结束值
					当head节点唤醒了后继后，会从SIGNAL变成0
					当head的一开始就是0，那么会变成PROPAGATE
	链表结构：拥有 head tail（一开始创建链表时，head和tail相等）
		head: 
			无意义的Node（资源并未被该Node所占有）
				如：一开始创建链表时
				或，该节点之前拥有资源，而后其释放了资源（此刻，其还是head，直到其唤醒后继并取得了资源，head才被设置）
			或，当前拥有资源的Node
	--
	当该Node是head的后继时，会试图获得资源（参见：acquireQueue中的for流程，即是：当该Node被唤醒时，还是会重走for流程）
		如果能获得，那么会设置自身为head，继续客户流程
			对于共享锁，此刻，会唤醒 新head的后继节点（参见：AbstractQueuedSynchronizer#setHeadAndPropagate）
		如果不能获得资源，那么Node会被阻塞（先要找到（并调整前继节点）前继节点（其waitStatus为SIGNAL）），等待被唤醒，
			唤醒方式为：
				被head节点 unparkSuccessor
				或者，自身线程.interrupt
			唤醒后，还是继续走 试图获取资源的流程（acquireQueue中的for循环）
			
>>> release资源时
开发者来定义 释放资源（tryRelease）并告诉是否可以唤醒后续节点
	提供了额外的state来协助实现
如果最终允许唤醒后继节点，那么会唤醒 head的后继节点.thread（离head最近的 未cancel的节点），使得其走 试图获得资源的流程
注意：
head.waitStatus会被设为0（在unparkSuccessor中，或，在doReleaseShared中）
此刻并没有调整Node链表（如：设置head）

release后，哪个线程能获取资源，一种情况（ReentrantLock的非公平情况）：
对于非公平ReentrantLock，线程1持有资源，线程2在等待获取
当release时，线程1在tryRelease中修改state为0，并返回true来允许唤醒线程2
而线程x此刻来tryAcquire，其是有将state从0变成1的可能，当成功后，其获得了资源
回到线程2，其被唤醒后，在tryAcquire时 失败，最终又被park
此时，拥有资源的线程 并不是head.next.thread，而是Node队列之外的 线程x

----------------什么时候调整了Node链表！！！！！！！！
. 当一个线程不能获取到资源，会生成Node，放入到链表的尾部（影响：tail.next（因为head一开始和tail是同一个节点，则也影响到head.next），tail）
. 在一个节点被唤醒后，当其pre是head 且能获取到资源时，会设置head为其自身（移除老head，老head.next为null）
. shouldParkAfterFailedAcquire时，会设置pre.waitStatus为SIGNAL，则会先找到未被cancel的前节点（移除已被cancel的 中间前节点（中间节点的两端 已经没有节点再指向它们），注意：这些中间节点的next/prev还是维持不变，为了：unparkSuccessor时（有可能shouldParkAfterFailedAcquire正在调整链表结构（Node.prev被调整）），还有可能遍历这些中间节点，来找到未被cancel的 需要唤醒的节点）

----------------并发性保证:
aqs没有使用synchronized关键字

while+CAS方式：
当tryAcquire失败时，将生成Node 并添加其到队尾（addWaiter()）

非while：
情况1. 
在shouldParkAfterFailedAcquire中，通过 确保Node.pre.waitStatus为SIGNAL 这种方式，向前遍历（从Node开始）并移除无效中间Node（其waitStatus>0）
这样能够 和 向队尾添加Node 避免冲突（一个向前 一个向后），则，此刻用了 非while
--
情况2. 
在unparkSuccessor中，要唤醒head之后的 第一个Node（其waitStatus<=0）
采用了 从tail开始，向前遍历的方式
这看似和 shouldParkAfterFailedAcquire中的 移除Node 向冲突，但实质上并没有
	当在遍历时，还未改变链表结构（nodeX.prev），那么无影响
	当在遍历时，改变了链表了结构，也无所谓，因为，二者的条件 均是waitStatus<=0，即是：我在遍历的时候，你在移除，你移除的东西我也是不需要的

----------------独占模式 共享模式:
是否只有一个线程能获得该资源
如果是：独占模式，如：ReentrantLock
否则：共享模式，如：CountDownLatch

----------------关于interrupt
非interrupt方式来获取：AbstractQueuedSynchronizer#acquire
当Node.thread被中断，LockSupport.park之后的流程会继续，则会走 试图获得资源的for流程，如果获取不到，还是会再一次被阻塞
	也即是：即使在其他线程上，调用了本Node.thread.interrupt()，其并不会抛出InterruptedException异常
而在其获取到资源后，其会主动 Node.thread.interrupt()（此刻，在Node.thread上再执行诸如Thread.sleep时，会抛出InterruptedException异常）

interrupt方式来获取：AbstractQueuedSynchronizer#acquireInterruptibly
最终执行到AbstractQueuedSynchronizer#doAcquireInterruptibly
	当Node.thread被中断，AbstractQueuedSynchronizer#parkAndCheckInterrupt继续，并返回了true
	会抛出InterruptedException异常
