public final boolean releaseShared(int arg) {
    if (tryReleaseShared(arg)) {//尝试释放资源
        doReleaseShared();//唤醒后继结点
        return true;
    }
    return false;
}

tryReleaseShared
参见：
. CountdownLatch中的实现
. aqs-总述.txt 中的 state部分

private void doReleaseShared() {
	//虽然执行的是for循环，但只是唤醒了head的后继 这一个节点（除非head发生了改变）
	//而链表上其他节点的唤醒，则依赖于老head的后继成为 新head后，根据propagate来唤醒（一次一个）（AbstractQueuedSynchronizer#setHeadAndPropagate）
	for (;;) {
        Node h = head;
        if (h != null && h != tail) {
            int ws = h.waitStatus;
            //当ws为SIGNAL时，则需要唤醒后继
            //设置head的ws为 0
            if (ws == Node.SIGNAL) {
            	//为什么会有CAS失败的情况：
            	//在thread1上，当unpark了后继，后继.thread（设为thread2）返回到doAcquireShare.for，很有可能获得了资源，那么其会执行setHeadAndPropagate
            	//node2成为了新的head，并准备唤醒其后继，设其准备执行 之下的这句
            	//而此刻，thread1继续执行，由于head发生了改变（为node2），又执行了一遍for循环，其使得node2.waitStatus为0
            	//而回到thread2，则CAS失败，因为expected已经发生了改变（不为SIGNAL，代表：不需要唤醒后继）
                if (!compareAndSetWaitStatus(h, Node.SIGNAL, 0))
                    continue;
                //唤醒后继，继续走doAcquireShared中的for循环
                unparkSuccessor(h);
            }
            //当ws为0，那么意味着没有后继需要唤醒，则最后设置ws为PROPAGATE
            else if (ws == 0 && !compareAndSetWaitStatus(h, 0, Node.PROPAGATE))
                continue;
        }
        
        //当head发生了改变，继续for，否则，可以退出了
        //什么时候head发生了改变：参见：执行unparkSuccessor的条件 的注释
        if (h == head)
            break;
    }
}