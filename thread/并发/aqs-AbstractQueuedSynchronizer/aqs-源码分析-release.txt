public final boolean release(int arg) {
	//子类来实现tryRelease
	//返回的 boolean代表：是否可以唤醒head的后继
	//如：可参见ReentrantLock.Sync#tryRelease：因为ReentrantLock是 资源可重入的，则设 当前线程申请了3次资源，则只有释放了3次资源后，才允许唤醒其他Node
	if (tryRelease(arg)) {
		Node h = head;
		//如果head.waitStatus为SIGNAL（此处，以 不为0 来表示），则唤醒head的 后继节点.thread
		if (h != null && h.waitStatus != 0)
			unparkSuccessor(h);
		return true;
	}
	return false;
}

//唤醒后继
private void unparkSuccessor(Node node) {
	//设置自身的status为0
	/*
	 * If status is negative (i.e., possibly needing signal) try
	 * to clear in anticipation of signalling.  It is OK if this
	 * fails or if status is changed by waiting thread.
	 */
	int ws = node.waitStatus;
	if (ws < 0)
		compareAndSetWaitStatus(node, ws, 0);

	//唤醒 有效的后继节点（未被cancel的）.thread
	//（注意：此处并没有改变Node链）
	//后继.thread被唤醒后，回到parkAndCheckInterrupt继续执行，并最终回到acquireQueued来执行for循环（试图获得锁：tryAcquire）
	/*
	 * Thread to unpark is held in successor, which is normally
	 * just the next node.  But if cancelled or apparently null,
	 * traverse backwards from tail to find the actual
	 * non-cancelled successor.
	 */
	Node s = node.next;
	if (s == null || s.waitStatus > 0) {
		s = null;
		for (Node t = tail; t != null && t != node; t = t.prev)
			if (t.waitStatus <= 0)
				s = t;
	}
	if (s != null)
		LockSupport.unpark(s.thread);
}