用于获取共享资源
public final void acquireShared(int arg) {
	if (tryAcquireShared(arg) < 0)
		doAcquireShared(arg);
}

tryAcquireShared的 返回值 含义：
>=0
	能获取到资源
	此时，state为0
<0
	不能获取到资源
请注意：该返回值不要和state混淆：
	无论是独占资源还是共享资源，state==0，才代表可以获取资源
	则，该情况下，当state==0时，tryAcquireShared的返回值才>=0
参见：CountDownLatch.Sync#tryAcquireShared
为什么返回值是int而不是boolean：
	当返回值>0时（非=0），唤醒head的后继
	注意：唤醒的节点个数为1个，如果需要唤醒链上的其他节点，那么让新head来唤醒其后继，就这么‘递归’下去
	为什么需要在获得资源时，唤醒后继：
		在共享资源场景中，god设置了x个障碍，当最后一个障碍被release后，我才能获得资源
		如果此刻，我再不唤醒其他人，那么他们将永远不会被唤醒：因为障碍已经没了，release不会再被执行，进而不会再执行唤醒

//当不能获取到资源时
private void doAcquireShared(int arg) {
    final Node node = addWaiter(Node.SHARED);//加入队列尾部
    boolean failed = true;//是否成功标志
    try {
        boolean interrupted = false;//等待过程中是否被中断过的标志
        //为何使用for循环，还是因为：当后继节点被唤醒时，会走该循环，来重新 试图获得资源
        for (;;) {
            final Node p = node.predecessor();//前驱
			//如果前继是head，那么试图获得资源
            if (p == head) {
                int r = tryAcquireShared(arg);//尝试获取资源
                if (r >= 0) {//成功
					//自身将成为head，当还有剩余资源时，则可以再唤醒之后的节点2
					//当节点2的线程被唤醒，会重新执行for循环，会尝试获取资源
					//注意：此刻，节点2已经是 新head（自身节点）的后继
					//当获取到资源后，节点2成为了head，并唤醒他的后继
					//此刻，会多次修改head（并非并发修改head，而是依次）
                    setHeadAndPropagate(node, r);
                    p.next = null; // help GC
                    if (interrupted)//如果等待过程中被打断过，此时将中断补上（没啥鸟用）
                        selfInterrupt();
                    failed = false;
                    return;
                }
            }
            
            //判断状态，寻找安全点，进入waiting状态，等着被unpark()或interrupt()
            if (shouldParkAfterFailedAcquire(p, node) &&
                parkAndCheckInterrupt())
                interrupted = true;
        }
    } finally {
        if (failed)
            cancelAcquire(node);
    }
}	

private void setHeadAndPropagate(Node node, int propagate) {
    Node h = head; 
    setHead(node);//head指向自己
    
     //如果还有剩余量，继续唤醒下一个后继线程
    if (propagate > 0 || 
    	h == null || h.waitStatus < 0 ||
    	(h = head) == null || h.waitStatus < 0) {
        Node s = node.next;
        if (s == null || s.isShared())
            doReleaseShared();
    }
}

private void doReleaseShared() {
	/**
		采用了for循环，为什么：
		当head发生了变动时，在当前线程上，而非其后继线程（该后继已经成为了新head）上，来唤醒新head的后继
	*/
	for (;;) {
		Node h = head;
		if (h != null && h != tail) {
			int ws = h.waitStatus;
			if (ws == Node.SIGNAL) {
				/**
					执行cas，来将ws从 SIGNAL变成0（初始状态）
					为什么要进行本次cas，在unparkSuccessor中，不是也会将head.ws cas来变成0吗
					设一种场景：head1 unpark了后继线程2，随后该线程继续执行doAcquireShare，获得了资源，并设置了head
					随后thread1继续执行，因为head变了（成为node2），继续执行for
					其改变了新head（node2）.ws为0，唤醒了新head的后继（node3），而node3也能更快的执行doAcquireShared的for流程
					现在thread2继续执行，当其执行到doReleaseShared时，发现head.ws已经不能cas到0（因为cas的expected并不是SIGNAL，而是已经为0了）
					则意味着：之前老head已经帮我 唤醒了 我的后继，那么我什么也用不做
				*/
				if (!compareAndSetWaitStatus(h, Node.SIGNAL, 0))
					continue;            // loop to recheck cases
				unparkSuccessor(h);
			}
			else if (ws == 0 &&
					 !compareAndSetWaitStatus(h, 0, Node.PROPAGATE))
				continue;                // loop on failed CAS
		}
		if (h == head)                   // loop if head changed
			break;
	}
}
