参见：
剖析Disruptor:为什么会这么快？（二）神奇的缓存行填充
	http://ifeve.com/disruptor-cacheline-padding/
Java 并发编程 : volatile 关键字解析
	http://mp.weixin.qq.com/s/WPHqv2RpT8ZM9gbQgXWx3Q

高速缓存是针对于cpu来讲的

为什么存在高速缓存：
计算机在执行程序时，每条指令都是在CPU中执行的，而执行指令过程中，势必涉及到数据的读取和写入。
由于程序运行过程中的临时数据是存放在主存（物理内存）当中的，这时就存在一个问题，由于CPU执行速度很快，而从内存读取数据和向内存写入数据的过程跟CPU执行指令的速度比起来要慢的多，因此如果任何时候对数据的操作都要通过和内存的交互来进行，会大大降低指令执行的速度。因此在CPU里面就有了高速缓存。
也就是，当程序在运行过程中，会将运算需要的数据从主存复制一份到CPU的高速缓存当中，
则，此时CPU进行计算时就可以直接从它的高速缓存读取数据和向其中写入数据，当运算结束之后，再将高速缓存中的数据刷新到主存当中（但是该写入时机是不确定的）。

对于线程：
代码的执行 运行于线程上，而线程由cpu来调度
在多核CPU中，每条线程可能运行于不同的CPU中，因此每个线程运行时有自己的高速缓存（因高速缓存 对应的是 cpu）
对单核CPU来说，多条线程共享一个cpu，则多个线程 共享 一个（组）高速缓存
