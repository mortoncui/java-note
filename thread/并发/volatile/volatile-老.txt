----------------------------------------可见性
对变量值的修改 总会在完成之后写回到主内存中。
如果缓存行无效，其他线程要读取该变量时，会从主内存中再重新读取到缓存

保证了不同线程对这个变量进行操作时的可见性，即一个线程修改了某个变量的值，这新值对其他线程来说是立即可见的。
	参见：并发特性/可见性.txt

----------------------------------------禁止进行指令重排序
例子：
int x,y;
volatile boolean flag;
 
x = 2;         //语句1
y = 0;         //语句2
flag = true;   //语句3
x = 4;         //语句4
y = -1;        //语句5

由于flag变量为volatile变量，那么在进行指令重排序的过程的时候，
	不会将语句3放到语句1、语句2前面，
		执行到语句3时，语句1和语句2必定是执行完毕了的，且语句1和语句2的执行结果对语句3、语句4、语句5是可见的。
	也不会将语句3放到语句4、语句5后面。
	说明：但是要注意语句1和语句2的顺序、语句4和语句5的顺序是不作任何保证的。

----------------------------------------不能保证原子性
不能保证原子性

----------------------------------------原理
参见：深入理解Java虚拟机

“观察加入volatile关键字和没有加入volatile关键字时所生成的汇编代码发现，加入volatile关键字时，会多出一个lock前缀指令”

lock前缀指令实际上相当于一个内存屏障，内存屏障会提供3个功能：
1）它确保指令重排序时不会把其后面的指令排到内存屏障之前的位置，也不会把前面的指令排到内存屏障的后面；即在执行到内存屏障这句指令时，在它前面的操作已经全部完成；
2）它会强制将对缓存的修改操作立即写入主存；
3）如果是写操作，它会导致其他CPU中对应的缓存行无效。 
