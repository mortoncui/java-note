参见：
Java8中CAS的增强
    http://ifeve.com/enhanced-cas-in-jdk8/
Java CAS 和ABA问题
	http://www.cnblogs.com/549294286/p/3766717.html
JAVA并发编程学习笔记之CAS操作
	http://blog.csdn.net/aesop_wubo/article/details/7537960
原子操作(CAS)
	http://286.iteye.com/blog/2295165
浅论Lock 与X86 Cache 一致性
	https://zhuanlan.zhihu.com/p/24146167

CAS: compare and swap/set	
CAS实际上利用了 处理器提供的CMPXCHG指令（一个原子性操作）
	
有什么用：
代替锁，提高性能

重要方法（参见：Unsafe操作.txt）：
Unsafe.compareAndSwapXXX(object, fieldOffset, expect, update);  
Unsafe.putOrderedXXX(object, fieldOffset, update);

CAS需要和volatile配合使用

----------------------------AtomicInteger的++i的cas实现方式：
>>>1.8版本（fetch-and-add指令）
public final int incrementAndGet() {
    //atomicinteger.value是当前值
    //在执行该fetch-and-add指令时，先判断当前 offset位置的field的值 是否为value
    //如果不是的话，将再次执行（当条件不满足时，将一直循环下去），并使用新的value值来进行判断
    //如果是的话，那么执行add操作
    //unsafe.getAndAddInt将返回执行add操作之前的 值
    //则，因为是incrementAndGet，那么需要返回add后的值，则需要 结果+1
    return unsafe.getAndAddInt(this, valueOffset, 1) + 1;
}
其中valueOffset为：unsafe.objectFieldOffset(AtomicInteger.class.getDeclaredField("value"));
而unsafe的getAndAddInt 将判断 运行平台是否支持 fetch-and-add指令
    如果支持，那么调用的将是native方法，执行效率将 提升很多
    如果不支持，那么调用CAS指令，如：
        public final int getAndAddInt(Object o, long offset, int delta) {
            int v;
            do {
            	//得到当前值
                v = getIntVolatile(o, offset);
            }
            //如果不满足条件（field的值并不是v），将会一直循环下去（在下次循环时，更新value的值）
            while (!compareAndSwapInt(o, offset, v, v + delta));
            return v;
        }
        public native int getIntVolatile(Object o, long offset);
        public final native boolean compareAndSwapInt(Object o, long offset,int expected, int x);

>>>1.7版本（compare-and-swap指令）
public final int incrementAndGet() {
    for (;;) {
        int current = get();
        int next = current + 1;
        //compareAndSet只会执行一次，如果成功，就将field的值设置为next，如果失败（该field的值并不是get()返回的值），就返回false
        //当成功时，退出循环，否则，一直循环下去
        if (compareAndSet(current, next))
            return next;
    }
}

public final boolean compareAndSet(int expect, int update) {
    return unsafe.compareAndSwapInt(this, valueOffset, expect, update);
}