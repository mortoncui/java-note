参见：
Java线程(八)：锁对象Lock-同步问题更完美的处理方式
    http://blog.csdn.net/ghsau/article/details/7461369

解决了什么问题：
为了保证数据的一致性和完整性，需要
	读和写是互斥的，
	写和写是互斥的，
	但是读和读是不需要互斥的

------------------------------------例子
（另外一个例子，参见：db\最佳实践\并发实践.txt）
public class ReadWriteLockTest {  
    public static void main(String[] args) {  
        final Data data = new Data();  
        for (int i = 0; i < 3; i++) {  
            new Thread(new Runnable() {  
                public void run() {  
                    for (int j = 0; j < 5; j++) {
                        data.set(new Random().nextInt(30));  
                    }  
                }  
            }).start();  
        }         
        for (int i = 0; i < 3; i++) {  
            new Thread(new Runnable() {  
                public void run() {  
                    for (int j = 0; j < 5; j++) {  
                        data.get();  
                    }  
                }  
            }).start();  
        }  
    }  
}  

class Data {
    private int data;// 共享数据  
    //接口ReadWriteLock
    private ReadWriteLock rwl = new ReentrantReadWriteLock();
    public void set(int data) {  
        rwl.writeLock().lock();// 申请 写锁  
        try {
            System.out.println(Thread.currentThread().getName() + "准备写入数据");  
            try {  
                Thread.sleep(20);  
            } catch (InterruptedException e) {  
                e.printStackTrace();  
            }  
            this.data = data;  
            System.out.println(Thread.currentThread().getName() + "写入" + this.data);  
        } finally {  
            rwl.writeLock().unlock();// 释放 写锁  
        }  
    }     
    public void get() {  
        rwl.readLock().lock();// 申请 读锁  
        try {  
            System.out.println(Thread.currentThread().getName() + "准备读取数据");  
            try {  
                Thread.sleep(20);  
            } catch (InterruptedException e) {  
                e.printStackTrace();  
            }  
            System.out.println(Thread.currentThread().getName() + "读取" + this.data);  
        } finally {  
            rwl.readLock().unlock();// 释放 读锁  
        }  
    }  
}  	