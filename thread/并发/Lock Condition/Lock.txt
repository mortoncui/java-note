参见：
Java线程(八)：锁对象Lock-同步问题更完美的处理方式
	http://blog.csdn.net/ghsau/article/details/7461369

java.util.concurrent.locks.Lock
实现提供了比使用synchronized 方法和语句可获得的更广泛的锁定操作

Lock相当于 需要互斥访问的资源

lock申请的锁需要手动释放
而且，需要放在finally块中，
为什么需要try.catch.finally这种结构：
	在临界区（lock()和unlock()之间的代码）在执行的过程中，可能会抛出异常

lock的释放 可以在其他线程中进行
相较于synchronized，可认为 synchronized的锁只能在 本线程的 本方法(本方法的同步块)中来释放

----------------------------ReentrantLock
内部核心：aqs
参见：aqs-AbstractQueuedSynchronizer/

和synchronized的区别：
. 对于同一个Reentrant对象，可以在thread1中lock，而在thread2中unlock
. 可以tryLock/tryLock(long timeout, TimeUnit unit)来 试图获取锁（对于签名中timeout的函数，将等待指定的时间）
. ReentrantLock并不会被自动释放，需要手动调用unlock

>>>公平性
体现在：设thread1拥有lock，而thread2和thread3 已在排队 来等候获取该lock
在某个时刻 thread1释放了该lock，而同时，thread4却冒出想要获取该lock，
thread4是否能立刻获得，还是，要排队在 thread2和thread3的后面
--
非公平下：thread4能获得
公平下：thread4不能获得，需要排队

默认为 非公平

public ReentrantLock(boolean fair) {
    sync = fair ? new FairSync() : new NonfairSync();
}

>>>可重入锁
如果一个线程已经持有了该lock，那么该线程还是可以继续lock.lock()
那么，在该线程中，必须调用 和lock()次数相同的unlock()，才能够释放该锁

Lock.lock() vs Lock.lockInterruptibly()
lockInterruptibly()会抛出InterruptedException。则当在线程threadA上执行lockInterruptibly()，但是还没有获得该lock，而在外部调用 threadA.interrupt()，那么将抛出异常
而lock()并不会发生异常

----------------------------例子
public class LockTest {
	public static void main(String[] args) {
		final Outputter1 output = new Outputter1();
		new Thread() {
			public void run() {
				output.output("zhangsan");
			};
		}.start();		
		new Thread() {
			public void run() {
				output.output("lisi");
			};
		}.start();
	}
}
class Outputter1 {
	private Lock lock = new ReentrantLock();// 锁对象
	public void output(String name) {
		// TODO 线程输出方法
		lock.lock();// 得到锁
		try {
			for(int i = 0; i < name.length(); i++) {
				System.out.print(name.charAt(i));
			}
		} finally {
			lock.unlock();// 释放锁
		}
	}
}