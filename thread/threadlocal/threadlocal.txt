参见：
深入理解ThreadLocal（一）
	http://mp.weixin.qq.com/s?__biz=MzI0MjE3OTYwMg==&mid=401548278&idx=1&sn=573d1cdf31a57db293b2b108e8d5c88b&scene=21#wechat_redirect
理解Java中的ThreadLocal - 技术小黑屋
	http://droidyue.com/blog/2016/03/13/learning-threadlocal-in-java/

如：有一个ThreadLocal对象，它在多个线程间共享，但
	在线程1上，ThreadLocal对象.set(value1)
	在线程2上，ThreadLocal对象.set(value2)
则，虽然多个线程在访问同一个ThreadLocal对象，但是，每个线程都对应了一个value对象
	因为：value存放在 ThreadLocal.ThreadLocalMap.Entry#value 中
	而Entry会存放在 ThreadLocal.ThreadLocalMap#table 中
	而不同的线程会提供不同的 ThreadLocalMap，则是 不同的ThreadLocalMap#table（存放着不同的Entry）

应用场景：
Looper#private static void prepare(boolean quitAllowed) {
    if (sThreadLocal.get() != null) {
        throw new RuntimeException("Only one Looper may be created per thread");
    }
    sThreadLocal.set(new Looper(quitAllowed));
}
即是：每个线程都对应了 一个Looper对象
--
SQLiteDatabase#private final ThreadLocal<SQLiteSession> mThreadSession = new ThreadLocal<SQLiteSession>() {
	@Override
	protected SQLiteSession initialValue() {
		return createSession();
	}
};
即是：每个线程都对应了 一个SQLiteSession对象
使用这个方式时，当在线程1上，调用ThreadLocal.get()时，会判断ThreadLocal#getMap(Thread t)中是否存在对应的Entry，如果没有，会调用ThreadLocal#initialValue

实现原理：
每个thread有几个ThreadLocalMap，其可以认为是一个map，其内部定义了entry，使用entry[]来存储entry
	entry（本质上是ThreadLocal的weakreference）:
		entry.key为 entry.get()（即是：ThreadLocal变量本身）
		entry.value为 ThreadLocal的set时的值）
当要ThreadLocal#get/set时，首先要获得Entry对应的ThreadLocalMap，则通过：ThreadLocal#getMap(当前线程)
	一般情况下：该ThreadLocalMap为 Thread.threadLocals
	对于InheritableThreadLocal（作用：子线程可以看到父线程中的Entry），其为t.inheritableThreadLocals
		参见：InheritableThreadLocal.txt
在找到了ThreadLocalMap后，如何定位Entry呢（对于 get/set）:
也是通过entry.key的rehash值（本质上是entry.get()（即是ThreadLocal）.threadLocalHashCode），
	ThreadLocal的hash值 并不是通过自身计算得来，而是ThreadLocal对象被实例化时 被分配（通过ThreadLocal.static AtomicInteger nextHashCode.getAndAdd(HASH_INCREMENT)）
		最终调用UnSafe#getAndAddInt(Object object, long fieldOffset, int delta)
			参见：CAS.txt
将entry映射到桶中
	针对于桶，未采用链表形式，而是，桶中只有一个entry

>>>hash冲突（开放地址法，非hashmap采用的链表法）：
ThreadLocal.set 会调用 ThreadLocalMap.set(ThreadLocal, value):
	使用entry.key.hashcode & (entry[].len-1)来定位在数组中的位置i
		如果该位置上已经存放了entry，那么
			判断该位置上的 entry的key 是否为 该ThreadLocal，如果是，那么更新 原有entry.value，结束
			判断该位置上的 entry的key 是否为 null（因为entry是ThreadLocal的weakreference），如果为null，那么更新该entry的 key和value，结束
			移动到 数组的下一个位置（有可能循环到第0个位置）
		如果该位置上没有存放entry，那么生成entry（这是key和value）并放入到该位置

>>>扩容（ThreadLocal.ThreadLocalMap#resize）
时机：在放置一个Entry时
条件：当entry的个数 >= 0.75 * threshold 时，需要扩容（扩容到：原数组的2倍）：
	threshold = 数组length 的 2/3
	参见：
	ThreadLocal.ThreadLocalMap#set
		ThreadLocal.ThreadLocalMap#rehash
			当已经存储的元素个数>threshold时：ThreadLocal.ThreadLocalMap#resize
如何扩容：将entry数据 映射（通过 rehash值 & (新数组.length-1)）到新数组上

>>>是否会引发内存泄漏
设：ThreadLocal是 内部类（非静态）
引用链为：
	运行中的Thread-Thread#threadLocals-ThreadLocal.ThreadLocalMap.Entry
		-弱引用于-ThreadLocal				//链1
		-ThreadLocal对应的值				//链2
链1不会引发内存泄漏
链2可能会引发内存泄漏
	虽然ThreadLocalMap会清理无效的Entry（其referent==null）
	但是只在ThreadLocal.ThreadLocalMap#set/get时：
		其最终会调用：ThreadLocal.ThreadLocalMap#expungeStaleEntries
	则，在必要时，执行ThreadLocal.ThreadLocalMap#cleanSomeSlots
