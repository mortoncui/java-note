AbstractExecutorService.public Future<?> submit(Runnable task, T result) {
	if (task == null) throw new NullPointerException();
	//构建FutureTask
	RunnableFuture<T> ftask = newTaskFor(task, result);
	//分配线程 来执行Runnable
	execute(ftask);
	return ftask;
}

AbstractExecutorService.protected <T> RunnableFuture<T> newTaskFor(Runnable runnable, T value) {
	return new FutureTask<T>(runnable, value);
}

public FutureTask(Runnable runnable, V result) {
	//指定Callable
	this.callable = Executors.callable(runnable, result);
	this.state = NEW;       // ensure visibility of callable
}

Executors.public static <T> Callable<T> callable(Runnable task, T result) {
	if (task == null)
		throw new NullPointerException();
	return new RunnableAdapter<T>(task, result);
}

Executors.static final class RunnableAdapter<T> implements Callable<T> {
	final Runnable task;
	//当正常结束后，返回result
	final T result;
	RunnableAdapter(Runnable task, T result) {
		this.task = task;
		this.result = result;
	}
	public T call() {
		task.run();
		return result;
	}
}

------------------------------------

AbstractExecutorService.public <T> Future<T> submit(Callable<T> task) {
	if (task == null) throw new NullPointerException();
	RunnableFuture<T> ftask = newTaskFor(task);
	execute(ftask);
	return ftask;
}

AbstractExecutorService.protected <T> RunnableFuture<T> newTaskFor(Callable<T> callable) {
	return new FutureTask<T>(callable);
}

public FutureTask(Callable<V> callable) {
	if (callable == null)
		throw new NullPointerException();
	this.callable = callable;
	this.state = NEW;       // ensure visibility of callable
}
