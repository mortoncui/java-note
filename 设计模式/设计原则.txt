一个类只能有一个职责
针对于接口指定工作流，当提供 接口的不同实现时，会有不同的效果（也为后续的扩展而准备）
拥抱新需求，后续的 新功能的实现，建立在：设计新的实现（接口子类）和 调整工作流（最好的情况，不会对工作流进行调整）
对不止一处的 依赖 进行封装
	封装本质：外部不需要了解内部工作流，只需要：如何向 封装体 发起请求，如何获得结果
	封装形态：小功能，工作流，稍具规模的模块
最小依赖：A依赖B，那么问：A需要B的什么功能，该功能真的需要B来提供实现吗？如果不是，将这部分功能抽取出来，放在C中，则A和B依赖C
依赖 类1，意味着 需要该类1的功能，那么，向上抽象，依赖于 接口1（类1的向上抽象）
