参见：
堆外内存之 DirectByteBuffer 详解
	http://www.importnew.com/26334.html
堆外内存的回收机制分析 - 简书
	https://www.jianshu.com/p/35cf0f348275
java之HeapByteBuffer&DirectByteBuffer以及回收DirectByteBuffer
	http://blog.csdn.net/xieyuooo/article/details/7547435
MaxDirectMemorySize – hellojavacases微信公众号网站
	http://hellojava.info/?tag=maxdirectmemorysize

--------------------传统的io访问过程：
用户态的heap上的缓冲区 <-> 用户态的native缓冲区（heap外） <-> 核心态的缓冲区 <-> io资源
为什么需要 数据拷贝 在 heap上的缓冲区 <-> 用户态的native缓冲区：
	只有内核才能访问io，而内核需要 用户态上的一块连续的byte序列 来存放数据
	如果heap上的缓冲区 直接和 内核交互，则产生问题：
		heap上的内存 是受jvm管理的，则gc操作将使得 heap上的 垃圾对象被清除 有效对象被移动，则原先的那块用于存放io数据的 byte序列，此刻可能存放着别的对象
		但，内核并不知道这些，它还是将数据 传入到 那块byte序列中

--------------------如何分配
>>> HeapByteBuffer
ByteBuffer.allocate(int capacity);
在堆上进行分配
当使用HeapByteBuffer类进行nio时，本质上，会创建一个临时性的DirectByteBuffer，并将数据复制到该buffer，后通过该buffer来和 内核的缓冲区进行交互
	FileChannelImpl#read(ByteBuffer)
		IOUtil#read(FileDescriptor var0, ByteBuffer var1, long var2, NativeDispatcher var4) throws IOException {
	        if(var1.isReadOnly()) {
	            throw new IllegalArgumentException("Read-only buffer");
	        } else if(var1 instanceof DirectBuffer) {
	            return readIntoNativeBuffer(var0, var1, var2, var4);
	        } else {
	        	//分配临时的DirectByteBuffer
	            ByteBuffer var5 = Util.getTemporaryDirectBuffer(var1.remaining());

	            int var7;
	            try {
	            	//将数据写入到DirectByteBuffer
	                int var6 = readIntoNativeBuffer(var0, var5, var2, var4);
	                var5.flip();
	                if(var6 > 0) {
	                	//将数据写入到HeapByteBuffer
	                    var1.put(var5);
	                }

	                var7 = var6;
	            } finally {
	            	//释放DirectByteBuffer,其中会调用cleaner.clean()
	                Util.offerFirstTemporaryDirectBuffer(var5);
	            }

	            return var7;
	        }
    }

>>> DirectByteBuffer
ByteBuffer.allocateDirect(int capacity);
	构建DirectByteBuffer(capacity)对象
		unsafe.allocateMemory(size);
		生成Cleaner对象
			Cleaner继承于虚引用，其clean方法对应的Runnable为 Deallocator（当Cleaner#clean调用时，Deallocator#run会调用）
			通过static Cleaner#add来构建Cleaner对象
				其内部是一个双向链表，表头为：static Cleaner.first
				新add的元素为成为表头
并不是在heap上分配，而是在 用户态的native内存上分配（则 该部分内存 并不受jvm控制）（通过Unsafe.allocateMemory）
使用其进行io访问时，并不需要 heap上的缓冲区<->用户态的native缓冲区 的数据拷贝，而是直接访问 用户态的native内存（如：DirectByteBuffer#get()），则性能有所提升

最大可申请多少：
-XX:MaxDirectMemorySize x[m|g]
注意：-Xmx + MaxDirectMemorySize 的值不能超过 物理内存的大小
对于android：只有RAM足够，就能一直申请下去

--------------------如何释放DirectByteBuffer
释放时机：
. System.gc
. 申请native内存失败时，会释放垃圾DirectByteBuffer对应的native内存，有可能还会调用gc

为什么gc可以释放DirectByteBuffer：
DirectByteBuffer包含了一个Cleaner来引用DirectByteBuffer
当gc发生时，该Cleaner所引用的DirectByteBuffer 可能被认为是垃圾（gcroot不可达它）
参照于该处理：当reference对应的真实对象被认为是垃圾时.txt，执行：
	Cleaner#clean
		DirectByteBuffer.Deallocator#run
			Unsafe#freeMemory 来释放native内存

手动释放：
为什么需要：gc可能没有那么及时
((DirectBuffer)buffer).cleaner().clean()

设置-XX:MaxDirectMemorySize
当使用的DirectByteBuffer超过了该值时，就会触发gc
