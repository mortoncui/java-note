参见：
图解集合3：CopyOnWriteArrayList
	http://www.cnblogs.com/xrq730/p/5020760.html

public class CopyOnWriteArrayList<E> implements List<E>, RandomAccess, Cloneable, java.io.Serializable {
    private static final long serialVersionUID = 8673264195747942595L;

    /** The lock protecting all mutators */
    transient final ReentrantLock lock = new ReentrantLock();

    /** The array, accessed only via getArray/setArray. */
    private volatile transient Object[] array;
    ...

    public boolean add(E e) {
    	//在写操作时，加锁
		final ReentrantLock lock = this.lock;
		lock.lock();
		try {
		    Object[] elements = getArray();
		    int len = elements.length;
		    //拷贝出一个新数组，前len个元素都和元素组的相同
		    Object[] newElements = Arrays.copyOf(elements, len + 1);
		    newElements[len] = e;
		    setArray(newElements);
		    return true;
		} finally {
		    lock.unlock();
		}
	}

	final void setArray(Object[] a) {
	    array = a;
	}

	final Object[] getArray() {
        return array;
    }
}

CopyOnWriteArrayList有什么好处：
读写分离
	写的时候用写库，读的时候用读库，二者使用的是不同的对象
数据的最终一致性
	线程1读取到的数据不一定是最新的，因为其他线程在修改这个array，二者针对的数组对象都不同。但是，对于在修改之后，其他线程再读取该数据时，得到的数据 和 修改后的数据是一致的（因为是同一个对象）
