参见:
图解集合5：不正确地使用HashMap引发死循环及元素丢失 - 五月的仓颉 - 博客园
	https://www.cnblogs.com/xrq730/p/5037299.html

为什么需要扩容：
如果桶内 链表很长，当需要get(key)时，当定位一个桶后，需要 拿rehashed keycode来和 桶的每个entry的 进行比较，这是耗时的

扩容都做了什么：
翻倍 桶的个数
重新计算现有的entry的rehash 以及 重新 将entry映射到桶

带来了什么：
entry可能被分配到了更多的桶中，则桶内的链表长度可能因此而变短，那么会提高检索性能

消耗：
重新将entry映射到桶中

扩容时机：
构造函数为：public HashMap(int initialCapacity, float loadFactor)
其中initialCapacity为桶的初始个数（默认为16），loadFactor默认为0.75
当 当前entry总数 > 桶个数*loadFactor时，桶的个数会 *=2
--
负载因子：
当负载因子取值过小，那么意味着，更早的时间去扩容，会引发 空间上的浪费
而负载因子取值过大，因为着 扩容的时机就更晚，那么会引发 诸如put等操作（有可能引发扩容）的 执行效率

多线程下，可能会引发问题
参见：HashMap并发扩容时的问题.png
